version: '3.8'

services:
  # PostgreSQL with PostGIS
  postgres:
    image: postgis/postgis:15-3.3
    container_name: afet_postgres
    environment:
      POSTGRES_USER: afet_user
      POSTGRES_PASSWORD: afet_password
      POSTGRES_DB: afet_db
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - afet_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U afet_user -d afet_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis
  redis:
    image: redis:7-alpine
    container_name: afet_redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - afet_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # RabbitMQ
  rabbitmq:
    image: rabbitmq:3.12-management
    container_name: afet_rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: afet_user
      RABBITMQ_DEFAULT_PASS: afet_password
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      - afet_network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: afet_backend
    environment:
      NODE_ENV: production
      PORT: 3000
      DATABASE_URL: postgresql://afet_user:afet_password@postgres:5432/afet_db
      REDIS_URL: redis://redis:6379
      RABBITMQ_URL: amqp://afet_user:afet_password@rabbitmq:5672
      JWT_SECRET: ${JWT_SECRET:-your-super-secret-jwt-key}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET:-your-refresh-token-secret}
      MAPBOX_ACCESS_TOKEN: ${MAPBOX_ACCESS_TOKEN}
      TWILIO_ACCOUNT_SID: ${TWILIO_ACCOUNT_SID}
      TWILIO_AUTH_TOKEN: ${TWILIO_AUTH_TOKEN}
      TWILIO_PHONE_NUMBER: ${TWILIO_PHONE_NUMBER}
      SMTP_HOST: ${SMTP_HOST:-smtp.gmail.com}
      SMTP_PORT: ${SMTP_PORT:-587}
      SMTP_USER: ${SMTP_USER}
      SMTP_PASS: ${SMTP_PASS}
    volumes:
      - ./backend/uploads:/app/uploads
      - ./backend/logs:/app/logs
    ports:
      - "3000:3000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - afet_network
    command: sh -c "npm run migrate && npm start"

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        VITE_API_URL: http://localhost:3000/api
        VITE_SOCKET_URL: http://localhost:3000
        VITE_MAPBOX_TOKEN: ${MAPBOX_ACCESS_TOKEN}
    container_name: afet_frontend
    ports:
      - "80:80"
    depends_on:
      - backend
    networks:
      - afet_network

  # Nginx (optional, for production-like setup)
  nginx:
    image: nginx:alpine
    container_name: afet_nginx
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./frontend/dist:/usr/share/nginx/html
    ports:
      - "443:443"
    depends_on:
      - backend
      - frontend
    networks:
      - afet_network
    profiles:
      - production

networks:
  afet_network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  rabbitmq_data: